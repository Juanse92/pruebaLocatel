{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/jsbt_/OneDrive/Escritorio/Prueba Locatel/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Observable, Subject } from 'rxjs';\nimport * as CryptoJS from \"crypto-js\";\nimport { endPoints } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./session.service\";\nexport class AuthService {\n  constructor(httpInt, sesionService) {\n    this.httpInt = httpInt;\n    this.sesionService = sesionService;\n    this.loginSubmitSubject = new Subject();\n    this.loginSubject = new Subject();\n    this.authEndPoint = endPoints.auth;\n    this.redirectUrl = \"/app/home\";\n  }\n\n  getLoginObservable() {\n    return this.loginSubject.asObservable();\n  }\n\n  checkisLoginExist(login, passwd) {\n    let body = login + \":\" + this.createHash(passwd);\n    return this.httpInt.post(this.authEndPoint + \"activetokens\" + \"?r=\" + false + (false != null ? \"&pin=\" + false : \"\"), body);\n  }\n\n  createHash(value) {\n    try {\n      return CryptoJS.SHA256(value);\n    } catch (e) {\n      return \"\";\n    }\n  }\n\n  login(login, passwd, recordar = true, pin = null) {\n    let body = login + \":\" + this.createHash(passwd);\n    return new Promise((resolve, reject) => {\n      this.httpInt.post(this.authEndPoint + \"?r=\" + recordar + (pin != null ? \"&pin=\" + pin : \"\"), body) // .pipe(\n      //     retry(1),\n      //     catchError((error) => {\n      //         console.log('Error en la solicitud:', error);\n      //         throw error;\n      //       })\n      // )\n      .subscribe(res => {\n        this.setSession(res, recordar);\n        resolve(res);\n      }, err => reject(err));\n    });\n  }\n\n  setSession(res, recordar) {\n    this.sesionService.setLoggedIn(true);\n    this.sesionService.setUsuario(res[\"usuario\"]);\n    this.sesionService.setAuthToken(res[\"Authorization\"]);\n\n    if (recordar != null && recordar == true && res[\"refresh\"] != null) {\n      this.sesionService.setRefreshToken(res[\"refresh\"]);\n    }\n  }\n\n  logout() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let refresh = yield _this.sesionService.getRefreshToken();\n      let auth = yield _this.sesionService.getAuthToken();\n      return new Promise((resolve, reject) => {\n        _this.httpInt.post(_this.authEndPoint + \"logout\", {\n          refresh: refresh,\n          Authorization: auth\n        }).subscribe(res => {\n          _this.sesionService.setLoggedIn(false);\n\n          resolve(res);\n        }, err => reject(err));\n      });\n    })();\n  }\n\n  sendNotification(email, tarea) {\n    let body = tarea;\n    let endpoint = this.authEndPoint + \"enviarCorreo/\" + email;\n    return new Promise((resolve, reject) => {\n      this.httpInt.post(endpoint, body).subscribe(res => resolve(res), err => reject(err));\n    });\n  }\n\n  callmsng() {\n    let endpoint = this.authEndPoint + \"enviarCorreoSemanal\";\n    return new Promise((resolve, reject) => {\n      this.httpInt.get(endpoint).subscribe(res => resolve(res), err => reject(err));\n    });\n  }\n\n  sendNotificationhallazgosCriticos(id, nocumplecriticos, numeroeconomico, ubicacion) {\n    let body = nocumplecriticos;\n    let endPoint = this.authEndPoint + 'enviarHallazgosCriticos/' + id + '/' + numeroeconomico + '/' + ubicacion;\n    return new Promise(resolve => {\n      this.httpInt.post(endPoint, body) // .map((res) => res)\n      .subscribe(res => {\n        resolve(res);\n      });\n    });\n  }\n\n  sendNotificationObservacionDenegada(email, observacion) {\n    let body = observacion;\n    let endpoint = this.authEndPoint + \"enviarCorreoDenegada/\" + email;\n    return new Promise((resolve, reject) => {\n      this.httpInt.post(endpoint, body).subscribe(res => resolve(res), err => reject(err));\n    });\n  }\n\n  resetPasswd(email) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (resolve, reject) {\n          yield _this2.httpInt.get(_this2.authEndPoint + \"recuperarPasswd/\" + email).subscribe(res => resolve(res), err => reject(err));\n        });\n\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n\n  refreshToken() {\n    // Verifica si se posee el refresh_token para refrescar el token de acceso\n    let refreshToken = this.sesionService.getRefreshToken();\n\n    if (refreshToken != null && refreshToken != \"undefined\") {\n      this.requestRefresh(refreshToken).then(resp => this.onLogin(resp)).catch(error => {\n        this.setLoginFormVisible(true);\n      });\n      this.logout();\n      return this.loginSubmitSubject.asObservable();\n    } else {\n      // Si no se posee passwd, visualiza el formulario de login\n      this.setLoginFormVisible(true);\n      return this.loginSubmitSubject.asObservable();\n    }\n  }\n\n  requestRefresh(token) {\n    let body = token;\n    let endpoint = this.authEndPoint + \"refrescarToken\";\n    return new Promise((resolve, reject) => {\n      this.httpInt.post(endpoint, body).subscribe(res => {\n        this.setSession(res, false);\n        resolve(res);\n      }, err => reject(err));\n    });\n  }\n\n  onLogin(res) {\n    this.loginSubmitSubject.next(res);\n  }\n\n  setLoginFormVisible(visible) {\n    this.loginSubject.next(visible);\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Observable","Subject","CryptoJS","endPoints","AuthService","constructor","httpInt","sesionService","auth","getLoginObservable","loginSubject","asObservable","checkisLoginExist","login","passwd","body","createHash","post","authEndPoint","value","SHA256","e","recordar","pin","Promise","resolve","reject","subscribe","res","setSession","err","setLoggedIn","setUsuario","setAuthToken","setRefreshToken","logout","refresh","getRefreshToken","getAuthToken","Authorization","sendNotification","email","tarea","endpoint","callmsng","get","sendNotificationhallazgosCriticos","id","nocumplecriticos","numeroeconomico","ubicacion","endPoint","sendNotificationObservacionDenegada","observacion","resetPasswd","refreshToken","requestRefresh","then","resp","onLogin","catch","error","setLoginFormVisible","loginSubmitSubject","token","next","visible","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\jsbt_\\OneDrive\\Escritorio\\Prueba Locatel\\front\\src\\app\\service\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable, Subject, catchError, retry } from 'rxjs';\r\nimport * as CryptoJS from \"crypto-js\";\r\nimport { HttpInt } from 'src/app/httpInt';\r\nimport { endPoints } from 'src/environments/environment';\r\nimport { SesionService } from './session.service';\r\nimport { ElementoInspeccion } from '../../inspecciones/entities/elemento-inspeccion';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n\r\n  private loginSubmitSubject = new Subject<any>();\r\n  private loginSubject = new Subject<any>();\r\n  authEndPoint = endPoints.auth;\r\n\r\n  redirectUrl: string = \"/app/home\";\r\n\r\n  constructor(\r\n    public httpInt: HttpInt,\r\n    public sesionService: SesionService,\r\n  ) { }\r\n\r\n  getLoginObservable(): Observable<boolean> {\r\n    return this.loginSubject.asObservable();\r\n  }\r\n\r\n  checkisLoginExist(login: string, passwd: string) {\r\n    let body = login + \":\" + this.createHash(passwd);\r\n    return this.httpInt\r\n        .post(\r\n            this.authEndPoint +\r\n                \"activetokens\" +\r\n                \"?r=\" +\r\n                false +\r\n                (false != null ? \"&pin=\" + false : \"\"),\r\n            body\r\n        );\r\n  }\r\n\r\n  createHash(value: string) {\r\n    try {\r\n        return CryptoJS.SHA256(value);\r\n    } catch (e) {\r\n        return \"\";\r\n    }\r\n  }\r\n\r\n  login(login: string, passwd: string, recordar: boolean = true, pin: string|null=null) {\r\n    let body = login + \":\" + this.createHash(passwd);\r\n    return new Promise((resolve, reject) => {\r\n        this.httpInt\r\n            .post(\r\n                this.authEndPoint +\r\n                    \"?r=\" +\r\n                    recordar +\r\n                    (pin != null ? \"&pin=\" + pin : \"\"),\r\n                body,\r\n            )\r\n            // .pipe(\r\n            //     retry(1),\r\n            //     catchError((error) => {\r\n            //         console.log('Error en la solicitud:', error);\r\n            //         throw error;\r\n            //       })\r\n            // )\r\n            .subscribe(\r\n                (res: unknown) => {\r\n                    this.setSession(res, recordar);\r\n                    resolve(res);\r\n                },\r\n                (err: any) => reject(err)\r\n            );\r\n    });\r\n  }\r\n\r\n  setSession(res: any, recordar?: boolean) {\r\n    this.sesionService.setLoggedIn(true);\r\n    this.sesionService.setUsuario(res[\"usuario\"]);\r\n    this.sesionService.setAuthToken(res[\"Authorization\"]);\r\n    if (recordar != null && recordar == true && res[\"refresh\"] != null) {\r\n        this.sesionService.setRefreshToken(res[\"refresh\"]);\r\n    }\r\n  }\r\n\r\n  async logout() {\r\n    let refresh = await this.sesionService.getRefreshToken();\r\n    let auth = await this.sesionService.getAuthToken();\r\n    return new Promise((resolve, reject) => {\r\n        this.httpInt\r\n            .post(this.authEndPoint + \"logout\", {\r\n                refresh: refresh,\r\n                Authorization: auth,\r\n            })\r\n            .subscribe(\r\n                (res) => {\r\n                    this.sesionService.setLoggedIn(false);\r\n                    resolve(res);\r\n                },\r\n                (err) => reject(err)\r\n            );\r\n    });\r\n  }\r\n  sendNotification(email: string, tarea:any) {\r\n    let body = tarea;\r\n    let endpoint = this.authEndPoint + \"enviarCorreo/\" + email;\r\n    return new Promise((resolve, reject) => {\r\n        this.httpInt\r\n            .post(endpoint, body)\r\n            .subscribe(\r\n                (res) => resolve(res),\r\n                (err) => reject(err)\r\n            );\r\n    });\r\n}\r\ncallmsng() {\r\n  let endpoint = this.authEndPoint + \"enviarCorreoSemanal\";\r\n  return new Promise((resolve, reject) => {\r\n      this.httpInt.get(endpoint)\r\n          .subscribe(\r\n              (res) => resolve(res),\r\n              (err) => reject(err)\r\n          );\r\n  });\r\n}\r\n\r\nsendNotificationhallazgosCriticos(id: string | number, nocumplecriticos: ElementoInspeccion[],numeroeconomico: string,ubicacion: string) {\r\n  let body = nocumplecriticos;\r\n  let endPoint = this.authEndPoint + 'enviarHallazgosCriticos/' + id + '/' + numeroeconomico  + '/' + ubicacion;\r\n  return new Promise((resolve) => {\r\n      this.httpInt\r\n          .post(endPoint , body)\r\n          // .map((res) => res)\r\n          .subscribe(\r\n              (res) => {\r\n                  resolve(res);\r\n              },\r\n             // (err) => this.manageError(err)\r\n          );\r\n  });\r\n}\r\nsendNotificationObservacionDenegada(email: string, observacion:any) {\r\n    let body = observacion;\r\n    let endpoint = this.authEndPoint + \"enviarCorreoDenegada/\" + email;\r\n    return new Promise((resolve, reject) => {\r\n        this.httpInt\r\n            .post(endpoint, body)\r\n            .subscribe(\r\n                (res) => resolve(res),\r\n                (err) => reject(err)\r\n            );\r\n    });\r\n}\r\n\r\n    async resetPasswd(email: string) {\r\n        return new Promise(async (resolve, reject) => {\r\n            await this.httpInt\r\n                .get(this.authEndPoint + \"recuperarPasswd/\" + email)\r\n                .subscribe(\r\n                    (res) => resolve(res),\r\n                    (err) => reject(err)\r\n                );\r\n        });\r\n    }\r\n\r\n    refreshToken(): Observable<any> {\r\n        // Verifica si se posee el refresh_token para refrescar el token de acceso\r\n        let refreshToken = this.sesionService.getRefreshToken();\r\n        if (refreshToken != null && refreshToken != \"undefined\") {\r\n            this.requestRefresh(refreshToken)\r\n                .then((resp) => this.onLogin(resp))\r\n                .catch((error) => {\r\n                    this.setLoginFormVisible(true);\r\n                });\r\n                this.logout();\r\n\r\n            return this.loginSubmitSubject.asObservable();\r\n        } else {\r\n            // Si no se posee passwd, visualiza el formulario de login\r\n            this.setLoginFormVisible(true);\r\n            return this.loginSubmitSubject.asObservable();\r\n        }\r\n    }\r\n\r\n    requestRefresh(token: string) {\r\n        let body = token;\r\n        let endpoint = this.authEndPoint + \"refrescarToken\";\r\n        return new Promise((resolve, reject) => {\r\n            this.httpInt\r\n                .post(endpoint, body)\r\n                .subscribe(\r\n                    (res) => {\r\n                        this.setSession(res, false);\r\n                        resolve(res);\r\n                    },\r\n                    (err) => reject(err)\r\n                );\r\n        });\r\n    }\r\n\r\n    onLogin(res: any) {\r\n        this.loginSubmitSubject.next(res);\r\n    }\r\n\r\n    setLoginFormVisible(visible: boolean) {\r\n        this.loginSubject.next(visible);\r\n    }\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}